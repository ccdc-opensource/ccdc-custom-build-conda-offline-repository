# Build on all three platforms
strategy:
  matrix:
    linux:
      imageName: 'ubuntu-20.04'
      buildosname: 'linux'
      outputArchiveType: 'tar'
      outputArchiveExtension: 'tar.gz'
    mac:
      imageName: 'macos-10.15'
      buildosname: 'macos'
      outputArchiveType: 'tar'
      outputArchiveExtension: 'tar.gz'
    windows:
      imageName: 'windows-2019'
      buildosname: 'windows'
      outputArchiveType: 'zip'
      outputArchiveExtension: 'zip'

pool:
  vmImage: $(imageName)

steps:
- checkout: self
  submodules: true
  persistCredentials: false
  displayName: 'ensure hotfixes repo is checked out'
  
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.8'

- script: pip install -r requirements.txt
  displayName: 'Install requirements'

- task: PythonScript@0
  inputs:
    scriptSource: 'filePath' # Options: filePath, inline
    scriptPath: create_offline_installer.py
    #arguments: # Optional
  displayName: 'Create Offline installer'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/output/miniconda3-$(miniconda_installer_version)-$(Build.BuildId)-$(buildosname)'
    archiveFile: '$(Build.ArtifactStagingDirectory)/miniconda3-$(miniconda_installer_version)-$(Build.BuildId)-$(buildosname).$(outputArchiveExtension)' 
    archiveType: '$(outputArchiveType)'

# Upload artifactory build info
- task: ArtifactoryGenericUpload@2
  inputs:
    artifactoryService: 'devops-ccdc-3rd-party'
    specSource: 'taskConfiguration'
    fileSpec: |
      {
        "files": [
          {
            "pattern": "$(Build.ArtifactStagingDirectory)/miniconda3*",
            "target": "ccdc-3rdparty-python-interpreters"
          }
        ]
      }
    replaceSpecVars: true
    collectBuildInfo: true
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)-$(buildosname)'
    module: 'miniconda3/$(buildosname)'
    includeEnvVars: true
    failNoOp: true
  displayName: 'Upload distribution to artifactory'

- task: ArtifactoryPublishBuildInfo@1
  inputs:
    artifactoryService: 'devops-ccdc-3rd-party'
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)-$(buildosname)'
    excludeEnvVars: '*password*;*secret*;*key*;*token*'
  displayName: 'Publish build'
